### YamlMime:ManagedReference
items:
- uid: McpXLib.McpX
  commentId: T:McpXLib.McpX
  id: McpX
  parent: McpXLib
  children:
  - McpXLib.McpX.#ctor(System.String,System.Int32,System.String,System.Boolean,System.Boolean,McpXLib.Enums.RequestFrame)
  - McpXLib.McpX.BatchReadAsync``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  - McpXLib.McpX.BatchRead``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  - McpXLib.McpX.BatchWriteAsync``1(McpXLib.Enums.Prefix,System.String,``0[])
  - McpXLib.McpX.BatchWrite``1(McpXLib.Enums.Prefix,System.String,``0[])
  - McpXLib.McpX.Dispose
  - McpXLib.McpX.RandomReadAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  - McpXLib.McpX.RandomRead``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  - McpXLib.McpX.RandomWriteAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  - McpXLib.McpX.RandomWrite``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  - McpXLib.McpX.ReadAsync``1(McpXLib.Enums.Prefix,System.String)
  - McpXLib.McpX.ReadString(McpXLib.Enums.Prefix,System.String,System.UInt16)
  - McpXLib.McpX.ReadStringAsync(McpXLib.Enums.Prefix,System.String,System.UInt16)
  - McpXLib.McpX.Read``1(McpXLib.Enums.Prefix,System.String)
  - McpXLib.McpX.WriteAsync``1(McpXLib.Enums.Prefix,System.String,``0)
  - McpXLib.McpX.WriteString(McpXLib.Enums.Prefix,System.String,System.String)
  - McpXLib.McpX.WriteStringAsync(McpXLib.Enums.Prefix,System.String,System.String)
  - McpXLib.McpX.Write``1(McpXLib.Enums.Prefix,System.String,``0)
  langs:
  - csharp
  - vb
  name: McpX
  nameWithType: McpX
  fullName: McpXLib.McpX
  type: Class
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: McpX
    path: ../McpXLib/McpX.cs
    startLine: 13
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: MCプロトコル拡張クラス
  remarks: Mcpクラス（MCプロトコル）を拡張して、デバイスアクセス点数などの機能制限を補うクラスです。
  example: []
  syntax:
    content: 'public class McpX : Mcp, IDisposable, IPlc'
    content.vb: Public Class McpX Inherits Mcp Implements IDisposable, IPlc
  inheritance:
  - System.Object
  - McpXLib.Abstructs.BasePlc
  - McpXLib.Mcp
  implements:
  - System.IDisposable
  - McpXLib.Interfaces.IPlc
  inheritedMembers:
  - McpXLib.Mcp.IsAscii
  - McpXLib.Mcp.Route
  - McpXLib.Mcp.RequestFrame
  - McpXLib.Mcp.MonitorRegistAsync(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  - McpXLib.Mcp.MonitorRegist(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  - McpXLib.Mcp.MonitorAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  - McpXLib.Mcp.Monitor``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  - McpXLib.Abstructs.BasePlc.RequestAsync(System.Byte[])
  - McpXLib.Abstructs.BasePlc.Request(System.Byte[])
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: McpXLib.McpX.#ctor(System.String,System.Int32,System.String,System.Boolean,System.Boolean,McpXLib.Enums.RequestFrame)
  commentId: M:McpXLib.McpX.#ctor(System.String,System.Int32,System.String,System.Boolean,System.Boolean,McpXLib.Enums.RequestFrame)
  id: '#ctor(System.String,System.Int32,System.String,System.Boolean,System.Boolean,McpXLib.Enums.RequestFrame)'
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: McpX(string, int, string?, bool, bool, RequestFrame)
  nameWithType: McpX.McpX(string, int, string?, bool, bool, RequestFrame)
  fullName: McpXLib.McpX.McpX(string, int, string?, bool, bool, McpXLib.Enums.RequestFrame)
  type: Constructor
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: .ctor
    path: ../McpXLib/McpX.cs
    startLine: 32
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: インスタンス初期化
  remarks: >-
    PLCのパラメータ設定に合わせたPLCの接続情報を指定します。<br />

    必要に応じて、リモートロックの解除を行います。
  example: []
  syntax:
    content: public McpX(string ip, int port, string? password = null, bool isAscii = false, bool isUdp = false, RequestFrame requestFrame = RequestFrame.E3)
    parameters:
    - id: ip
      type: System.String
      description: PLCのIPアドレスを指定します。
    - id: port
      type: System.Int32
      description: PLCのポートを指定します。
    - id: password
      type: System.String
      description: PLCのリモートパスワードを指定します。（リモートパスワードを設定している場合に指定してください。）
    - id: isAscii
      type: System.Boolean
      description: ASCIIコードによる交信を行う場合に<code>true</code>を指定します。（デフォルトは、バイナリ交信:<code>false</code>です。）
    - id: isUdp
      type: System.Boolean
      description: UDPによる交信を行う場合に<code>true</code>を指定します。（デフォルトは、TCP交信:<code>false</code>です。）
    - id: requestFrame
      type: McpXLib.Enums.RequestFrame
      description: フレーム（データ交信電文）の種類を指定します。（デフォルトは、3Eフレーム:<code>RequestFrame.E3</code>です。）
    content.vb: Public Sub New(ip As String, port As Integer, password As String = Nothing, isAscii As Boolean = False, isUdp As Boolean = False, requestFrame As RequestFrame = RequestFrame.E3)
  overload: McpXLib.McpX.#ctor*
  exceptions:
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.New(String, Integer, String, Boolean, Boolean, RequestFrame)
  fullName.vb: McpXLib.McpX.New(String, Integer, String, Boolean, Boolean, McpXLib.Enums.RequestFrame)
  name.vb: New(String, Integer, String, Boolean, Boolean, RequestFrame)
- uid: McpXLib.McpX.Read``1(McpXLib.Enums.Prefix,System.String)
  commentId: M:McpXLib.McpX.Read``1(McpXLib.Enums.Prefix,System.String)
  id: Read``1(McpXLib.Enums.Prefix,System.String)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: Read<T>(Prefix, string)
  nameWithType: McpX.Read<T>(Prefix, string)
  fullName: McpXLib.McpX.Read<T>(McpXLib.Enums.Prefix, string)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: Read
    path: ../McpXLib/McpX.cs
    startLine: 72
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 単一デバイス読み込み
  remarks: >-
    単一デバイスの値をPLCから読み込みます。<br />

    指定された型<code>T</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public T Read<T>(Prefix prefix, string address) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 読み込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 読み込み対象の先頭アドレスを指定します。
    typeParameters:
    - id: T
      description: >-
        読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: '{T}'
      description: PLCから読み込んだ値を指定された型<code>T</code>に変換して返します。
    content.vb: Public Function Read(Of T As Structure)(prefix As Prefix, address As String) As T
  overload: McpXLib.McpX.Read*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.Read(Of T)(Prefix, String)
  fullName.vb: McpXLib.McpX.Read(Of T)(McpXLib.Enums.Prefix, String)
  name.vb: Read(Of T)(Prefix, String)
- uid: McpXLib.McpX.ReadAsync``1(McpXLib.Enums.Prefix,System.String)
  commentId: M:McpXLib.McpX.ReadAsync``1(McpXLib.Enums.Prefix,System.String)
  id: ReadAsync``1(McpXLib.Enums.Prefix,System.String)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: ReadAsync<T>(Prefix, string)
  nameWithType: McpX.ReadAsync<T>(Prefix, string)
  fullName: McpXLib.McpX.ReadAsync<T>(McpXLib.Enums.Prefix, string)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: ReadAsync
    path: ../McpXLib/McpX.cs
    startLine: 109
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 単一デバイス読み込み（非同期）
  remarks: >-
    指定したデバイスの値を非同期でPLCから読み込みます。<br />

    指定された型<code>T</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public Task<T> ReadAsync<T>(Prefix prefix, string address) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 読み込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 読み込み対象の先頭アドレス
    typeParameters:
    - id: T
      description: >-
        読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: PLCから読み込んだ値を指定された型<code>T</code>に変換して返します。
    content.vb: Public Function ReadAsync(Of T As Structure)(prefix As Prefix, address As String) As Task(Of T)
  overload: McpXLib.McpX.ReadAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.ReadAsync(Of T)(Prefix, String)
  fullName.vb: McpXLib.McpX.ReadAsync(Of T)(McpXLib.Enums.Prefix, String)
  name.vb: ReadAsync(Of T)(Prefix, String)
- uid: McpXLib.McpX.BatchRead``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  commentId: M:McpXLib.McpX.BatchRead``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  id: BatchRead``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: BatchRead<T>(Prefix, string, ushort)
  nameWithType: McpX.BatchRead<T>(Prefix, string, ushort)
  fullName: McpXLib.McpX.BatchRead<T>(McpXLib.Enums.Prefix, string, ushort)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: BatchRead
    path: ../McpXLib/McpX.cs
    startLine: 154
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 連続デバイス読み込み
  remarks: 指定したデバイス範囲の値をPLCから読み込みます。<br />
  example: []
  syntax:
    content: 'public T[] BatchRead<T>(Prefix prefix, string address, ushort length) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 読み込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 読み込み対象の先頭アドレスを指定します。
    - id: length
      type: System.UInt16
      description: >-
        読み込み対象の要素数を指定します。<br />

        指定された型<code>T</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。<br />

        そのため、この引数には「最終的に取得する配列の要素数（<code>T</code>型の要素数）」を指定してください。
    typeParameters:
    - id: T
      description: >-
        読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: '{T}[]'
      description: PLCから読み込んだ値を指定された型<code>T</code>に変換して返します。
    content.vb: Public Function BatchRead(Of T As Structure)(prefix As Prefix, address As String, length As UShort) As T()
  overload: McpXLib.McpX.BatchRead*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.BatchRead(Of T)(Prefix, String, UShort)
  fullName.vb: McpXLib.McpX.BatchRead(Of T)(McpXLib.Enums.Prefix, String, UShort)
  name.vb: BatchRead(Of T)(Prefix, String, UShort)
- uid: McpXLib.McpX.BatchReadAsync``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  commentId: M:McpXLib.McpX.BatchReadAsync``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  id: BatchReadAsync``1(McpXLib.Enums.Prefix,System.String,System.UInt16)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: BatchReadAsync<T>(Prefix, string, ushort)
  nameWithType: McpX.BatchReadAsync<T>(Prefix, string, ushort)
  fullName: McpXLib.McpX.BatchReadAsync<T>(McpXLib.Enums.Prefix, string, ushort)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: BatchReadAsync
    path: ../McpXLib/McpX.cs
    startLine: 227
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 連続デバイス読み込み（非同期）
  remarks: 指定したデバイス範囲の値を非同期でPLCから読み込みます。<br />
  example: []
  syntax:
    content: 'public Task<T[]> BatchReadAsync<T>(Prefix prefix, string address, ushort length) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 読み込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 読み込み対象の先頭アドレスを指定します。
    - id: length
      type: System.UInt16
      description: >-
        読み込み対象の要素数を指定します。<br />

        指定された型<code>T</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。<br />

        そのため、この引数には「最終的に取得する配列の要素数（<code>T</code>型の要素数）」を指定してください。
    typeParameters:
    - id: T
      description: >-
        読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: System.Threading.Tasks.Task{{T}[]}
      description: PLCから読み込んだ値を指定された型<code>T</code>に変換して返します。
    content.vb: Public Function BatchReadAsync(Of T As Structure)(prefix As Prefix, address As String, length As UShort) As Task(Of T())
  overload: McpXLib.McpX.BatchReadAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.BatchReadAsync(Of T)(Prefix, String, UShort)
  fullName.vb: McpXLib.McpX.BatchReadAsync(Of T)(McpXLib.Enums.Prefix, String, UShort)
  name.vb: BatchReadAsync(Of T)(Prefix, String, UShort)
- uid: McpXLib.McpX.Write``1(McpXLib.Enums.Prefix,System.String,``0)
  commentId: M:McpXLib.McpX.Write``1(McpXLib.Enums.Prefix,System.String,``0)
  id: Write``1(McpXLib.Enums.Prefix,System.String,``0)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: Write<T>(Prefix, string, T)
  nameWithType: McpX.Write<T>(Prefix, string, T)
  fullName: McpXLib.McpX.Write<T>(McpXLib.Enums.Prefix, string, T)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: Write
    path: ../McpXLib/McpX.cs
    startLine: 296
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 単一デバイス書き込み
  remarks: >-
    単一デバイスの値をPLCに書き込みます。<br />

    指定された型<code>T</code>に応じて、内部的に書き込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public void Write<T>(Prefix prefix, string address, T value) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 書き込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 書き込み対象の先頭アドレスを指定します。
    - id: value
      type: '{T}'
      description: 書き込みする値を指定します。
    typeParameters:
    - id: T
      description: >-
        書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    content.vb: Public Sub Write(Of T As Structure)(prefix As Prefix, address As String, value As T)
  overload: McpXLib.McpX.Write*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.Write(Of T)(Prefix, String, T)
  fullName.vb: McpXLib.McpX.Write(Of T)(McpXLib.Enums.Prefix, String, T)
  name.vb: Write(Of T)(Prefix, String, T)
- uid: McpXLib.McpX.WriteAsync``1(McpXLib.Enums.Prefix,System.String,``0)
  commentId: M:McpXLib.McpX.WriteAsync``1(McpXLib.Enums.Prefix,System.String,``0)
  id: WriteAsync``1(McpXLib.Enums.Prefix,System.String,``0)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: WriteAsync<T>(Prefix, string, T)
  nameWithType: McpX.WriteAsync<T>(Prefix, string, T)
  fullName: McpXLib.McpX.WriteAsync<T>(McpXLib.Enums.Prefix, string, T)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: WriteAsync
    path: ../McpXLib/McpX.cs
    startLine: 334
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 単一デバイス書き込み（非同期）
  remarks: >-
    指定したデバイスに値を非同期でPLCへ書き込みます。<br />

    指定された型<code>T</code>に応じて、内部的に書き込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public Task WriteAsync<T>(Prefix prefix, string address, T value) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 書き込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 書き込み対象の先頭アドレスを指定します。
    - id: value
      type: '{T}'
      description: 書き込みする値を指定します。
    typeParameters:
    - id: T
      description: >-
        書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function WriteAsync(Of T As Structure)(prefix As Prefix, address As String, value As T) As Task
  overload: McpXLib.McpX.WriteAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.WriteAsync(Of T)(Prefix, String, T)
  fullName.vb: McpXLib.McpX.WriteAsync(Of T)(McpXLib.Enums.Prefix, String, T)
  name.vb: WriteAsync(Of T)(Prefix, String, T)
- uid: McpXLib.McpX.BatchWrite``1(McpXLib.Enums.Prefix,System.String,``0[])
  commentId: M:McpXLib.McpX.BatchWrite``1(McpXLib.Enums.Prefix,System.String,``0[])
  id: BatchWrite``1(McpXLib.Enums.Prefix,System.String,``0[])
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: BatchWrite<T>(Prefix, string, T[])
  nameWithType: McpX.BatchWrite<T>(Prefix, string, T[])
  fullName: McpXLib.McpX.BatchWrite<T>(McpXLib.Enums.Prefix, string, T[])
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: BatchWrite
    path: ../McpXLib/McpX.cs
    startLine: 373
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 連続デバイス書き込み
  remarks: >-
    指定したデバイス範囲に値をPLCへ書き込みます。<br />

    指定された型<code>T</code>に応じて、内部的に書き込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public T[] BatchWrite<T>(Prefix prefix, string address, T[] values) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 書き込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 書き込み対象の先頭アドレスを指定します。
    - id: values
      type: '{T}[]'
      description: 書き込みする値を配列で指定します。
    typeParameters:
    - id: T
      description: >-
        書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: '{T}[]'
      description: <code>values</code>の値をそのまま返します。
    content.vb: Public Function BatchWrite(Of T As Structure)(prefix As Prefix, address As String, values As T()) As T()
  overload: McpXLib.McpX.BatchWrite*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.BatchWrite(Of T)(Prefix, String, T())
  fullName.vb: McpXLib.McpX.BatchWrite(Of T)(McpXLib.Enums.Prefix, String, T())
  name.vb: BatchWrite(Of T)(Prefix, String, T())
- uid: McpXLib.McpX.BatchWriteAsync``1(McpXLib.Enums.Prefix,System.String,``0[])
  commentId: M:McpXLib.McpX.BatchWriteAsync``1(McpXLib.Enums.Prefix,System.String,``0[])
  id: BatchWriteAsync``1(McpXLib.Enums.Prefix,System.String,``0[])
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: BatchWriteAsync<T>(Prefix, string, T[])
  nameWithType: McpX.BatchWriteAsync<T>(Prefix, string, T[])
  fullName: McpXLib.McpX.BatchWriteAsync<T>(McpXLib.Enums.Prefix, string, T[])
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: BatchWriteAsync
    path: ../McpXLib/McpX.cs
    startLine: 436
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 連続デバイス書き込み（非同期）
  remarks: >-
    指定したデバイス範囲に値を非同期でPLCへ書き込みます。<br />

    指定された型<code>T</code>に応じて、内部的に書き込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public Task<T[]> BatchWriteAsync<T>(Prefix prefix, string address, T[] values) where T : unmanaged'
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 書き込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 書き込み対象の先頭アドレスを指定します。
    - id: values
      type: '{T}[]'
      description: 書き込みする値を配列で指定します。
    typeParameters:
    - id: T
      description: >-
        書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: System.Threading.Tasks.Task{{T}[]}
      description: <code>values</code>の値をそのまま返します。
    content.vb: Public Function BatchWriteAsync(Of T As Structure)(prefix As Prefix, address As String, values As T()) As Task(Of T())
  overload: McpXLib.McpX.BatchWriteAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.BatchWriteAsync(Of T)(Prefix, String, T())
  fullName.vb: McpXLib.McpX.BatchWriteAsync(Of T)(McpXLib.Enums.Prefix, String, T())
  name.vb: BatchWriteAsync(Of T)(Prefix, String, T())
- uid: McpXLib.McpX.RandomRead``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  commentId: M:McpXLib.McpX.RandomRead``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  id: RandomRead``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: RandomRead<T1, T2>((Prefix prefix, string address)[], (Prefix prefix, string address)[])
  nameWithType: McpX.RandomRead<T1, T2>((Prefix prefix, string address)[], (Prefix prefix, string address)[])
  fullName: McpXLib.McpX.RandomRead<T1, T2>((McpXLib.Enums.Prefix prefix, string address)[], (McpXLib.Enums.Prefix prefix, string address)[])
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: RandomRead
    path: ../McpXLib/McpX.cs
    startLine: 514
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: ランダムデバイス読み込み
  remarks: >-
    指定したデバイスの値をPLCから読み込みます。<br />

    指定された型<code>T1</code>、<code>T2</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public (T1[] wordValues, T2[] doubleValues) RandomRead<T1, T2>((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) where T1 : unmanaged where T2 : unmanaged'
    parameters:
    - id: wordAddresses
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String}[]
      description: >-
        16ビット単位で読み込むデバイスアドレスの配列を指定します。<br />

        ・<code>prefix</code>:読み込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:読み込み対象のアドレスを指定します。
    - id: doubleWordAddresses
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String}[]
      description: >-
        32ビット単位で読み込むデバイスの配列を指定します。<br />

        ・<code>prefix</code>:読み込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:読み込み対象のアドレスを指定します。
    typeParameters:
    - id: T1
      description: >-
        16ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    - id: T2
      description: >-
        32ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: System.ValueTuple{{T1}[],{T2}[]}
      description: >-
        PLCから読み込んだ値を指定した型<code>T1</code>、<code>T2</code>に変換して返します。<br />

        ・<code>wordValues</code>: 16ビット単位で読み込まれた <code>T1</code>型の値の配列<br />

        ・<code>doubleValues</code>: 32ビット単位で読み込まれた <code>T2</code>型の値の配列
    content.vb: Public Function RandomRead(Of T1 As Structure, T2 As Structure)(wordAddresses As (prefix As Prefix, address As String)(), doubleWordAddresses As (prefix As Prefix, address As String)()) As (wordValues As T1(), doubleValues As T2())
  overload: McpXLib.McpX.RandomRead*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.RandomRead(Of T1, T2)((prefix As Prefix, address As String)(), (prefix As Prefix, address As String)())
  fullName.vb: McpXLib.McpX.RandomRead(Of T1, T2)((prefix As McpXLib.Enums.Prefix, address As String)(), (prefix As McpXLib.Enums.Prefix, address As String)())
  name.vb: RandomRead(Of T1, T2)((prefix As Prefix, address As String)(), (prefix As Prefix, address As String)())
- uid: McpXLib.McpX.RandomReadAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  commentId: M:McpXLib.McpX.RandomReadAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  id: RandomReadAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: RandomReadAsync<T1, T2>((Prefix prefix, string address)[], (Prefix prefix, string address)[])
  nameWithType: McpX.RandomReadAsync<T1, T2>((Prefix prefix, string address)[], (Prefix prefix, string address)[])
  fullName: McpXLib.McpX.RandomReadAsync<T1, T2>((McpXLib.Enums.Prefix prefix, string address)[], (McpXLib.Enums.Prefix prefix, string address)[])
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: RandomReadAsync
    path: ../McpXLib/McpX.cs
    startLine: 575
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: ランダムデバイス読み込み（非同期）
  remarks: >-
    指定したデバイスの値を非同期でPLCから読み込みます。<br />

    指定された型<code>T1</code>、<code>T2</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public Task<(T1[] wordValues, T2[] doubleValues)> RandomReadAsync<T1, T2>((Prefix prefix, string address)[] wordAddresses, (Prefix prefix, string address)[] doubleWordAddresses) where T1 : unmanaged where T2 : unmanaged'
    parameters:
    - id: wordAddresses
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String}[]
      description: >-
        16ビット単位で読み込むデバイスアドレスの配列を指定します。<br />

        ・<code>prefix</code>:読み込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:読み込み対象のアドレスを指定します。
    - id: doubleWordAddresses
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String}[]
      description: >-
        32ビット単位で読み込むデバイスの配列を指定します。<br />

        ・<code>prefix</code>:読み込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:読み込み対象のアドレスを指定します。
    typeParameters:
    - id: T1
      description: >-
        16ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    - id: T2
      description: >-
        32ビット単位で読み込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: System.Threading.Tasks.Task{System.ValueTuple{{T1}[],{T2}[]}}
      description: >-
        PLCから読み込んだ値を指定した型<code>T1</code>、<code>T2</code>に変換して返します。<br />

        ・<code>wordValues</code>: 16ビット単位で読み込まれた <code>T1</code>型の値の配列<br />

        ・<code>doubleValues</code>: 32ビット単位で読み込まれた <code>T2</code>型の値の配列
    content.vb: Public Function RandomReadAsync(Of T1 As Structure, T2 As Structure)(wordAddresses As (prefix As Prefix, address As String)(), doubleWordAddresses As (prefix As Prefix, address As String)()) As Task(Of (wordValues As T1(), doubleValues As T2()))
  overload: McpXLib.McpX.RandomReadAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.RandomReadAsync(Of T1, T2)((prefix As Prefix, address As String)(), (prefix As Prefix, address As String)())
  fullName.vb: McpXLib.McpX.RandomReadAsync(Of T1, T2)((prefix As McpXLib.Enums.Prefix, address As String)(), (prefix As McpXLib.Enums.Prefix, address As String)())
  name.vb: RandomReadAsync(Of T1, T2)((prefix As Prefix, address As String)(), (prefix As Prefix, address As String)())
- uid: McpXLib.McpX.RandomWrite``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  commentId: M:McpXLib.McpX.RandomWrite``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  id: RandomWrite``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: RandomWrite<T1, T2>((Prefix prefix, string address, T1 value)[], (Prefix prefix, string address, T2 value)[])
  nameWithType: McpX.RandomWrite<T1, T2>((Prefix prefix, string address, T1 value)[], (Prefix prefix, string address, T2 value)[])
  fullName: McpXLib.McpX.RandomWrite<T1, T2>((McpXLib.Enums.Prefix prefix, string address, T1 value)[], (McpXLib.Enums.Prefix prefix, string address, T2 value)[])
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: RandomWrite
    path: ../McpXLib/McpX.cs
    startLine: 633
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: ランダムデバイス書き込み
  remarks: >-
    指定したデバイスに対し、値をPLCへ書き込みます。<br />

    指定された型<code>T1</code>、<code>T2</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public void RandomWrite<T1, T2>((Prefix prefix, string address, T1 value)[] wordDevices, (Prefix prefix, string address, T2 value)[] doubleWordDevices) where T1 : unmanaged where T2 : unmanaged'
    parameters:
    - id: wordDevices
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String,{T1}}[]
      description: >-
        16ビット単位で書き込むデバイスの配列を指定します。<br />

        ・<code>prefix</code>:書き込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:書き込み対象のアドレスを指定します。<br />

        ・<code>value</code>:書き込みする値を指定します。
    - id: doubleWordDevices
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String,{T2}}[]
      description: >-
        32ビット単位で書き込むデバイスの配列を指定します。<br />

        ・<code>prefix</code>:書き込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:書き込み対象のアドレスを指定します。

        ・<code>value</code>:書き込みする値を指定します。
    typeParameters:
    - id: T1
      description: >-
        16ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    - id: T2
      description: >-
        32ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    content.vb: Public Sub RandomWrite(Of T1 As Structure, T2 As Structure)(wordDevices As (prefix As Prefix, address As String, value As T1)(), doubleWordDevices As (prefix As Prefix, address As String, value As T2)())
  overload: McpXLib.McpX.RandomWrite*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.RandomWrite(Of T1, T2)((prefix As Prefix, address As String, value As T1)(), (prefix As Prefix, address As String, value As T2)())
  fullName.vb: McpXLib.McpX.RandomWrite(Of T1, T2)((prefix As McpXLib.Enums.Prefix, address As String, value As T1)(), (prefix As McpXLib.Enums.Prefix, address As String, value As T2)())
  name.vb: RandomWrite(Of T1, T2)((prefix As Prefix, address As String, value As T1)(), (prefix As Prefix, address As String, value As T2)())
- uid: McpXLib.McpX.RandomWriteAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  commentId: M:McpXLib.McpX.RandomWriteAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  id: RandomWriteAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}[])
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: RandomWriteAsync<T1, T2>((Prefix prefix, string address, T1 value)[], (Prefix prefix, string address, T2 value)[])
  nameWithType: McpX.RandomWriteAsync<T1, T2>((Prefix prefix, string address, T1 value)[], (Prefix prefix, string address, T2 value)[])
  fullName: McpXLib.McpX.RandomWriteAsync<T1, T2>((McpXLib.Enums.Prefix prefix, string address, T1 value)[], (McpXLib.Enums.Prefix prefix, string address, T2 value)[])
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: RandomWriteAsync
    path: ../McpXLib/McpX.cs
    startLine: 708
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: ランダムデバイス書き込み（非同期）
  remarks: >-
    指定したデバイスに対し、値を非同期でPLCへ書き込みます。<br />

    指定された型<code>T1</code>、<code>T2</code>に応じて、内部的に読み込むデバイス点数は自動的に調整されます。
  example: []
  syntax:
    content: 'public Task RandomWriteAsync<T1, T2>((Prefix prefix, string address, T1 value)[] wordDevices, (Prefix prefix, string address, T2 value)[] doubleWordDevices) where T1 : unmanaged where T2 : unmanaged'
    parameters:
    - id: wordDevices
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String,{T1}}[]
      description: >-
        16ビット単位で書き込むデバイスの配列を指定します。<br />

        ・<code>prefix</code>:書き込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:書き込み対象のアドレスを指定します。<br />

        ・<code>value</code>:書き込みする値を指定します。
    - id: doubleWordDevices
      type: System.ValueTuple{McpXLib.Enums.Prefix,System.String,{T2}}[]
      description: >-
        32ビット単位で書き込むデバイスの配列を指定します。<br />

        ・<code>prefix</code>:書き込み対象のデバイスコードを指定します。<br />

        ・<code>address</code>:書き込み対象のアドレスを指定します。

        ・<code>value</code>:書き込みする値を指定します。
    typeParameters:
    - id: T1
      description: >-
        16ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    - id: T2
      description: >-
        32ビット単位で書き込むデータの型。bool, short, int などの値型を指定します。

        `unmanaged` 制約があるため、参照型は使用できません。
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function RandomWriteAsync(Of T1 As Structure, T2 As Structure)(wordDevices As (prefix As Prefix, address As String, value As T1)(), doubleWordDevices As (prefix As Prefix, address As String, value As T2)()) As Task
  overload: McpXLib.McpX.RandomWriteAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.RandomWriteAsync(Of T1, T2)((prefix As Prefix, address As String, value As T1)(), (prefix As Prefix, address As String, value As T2)())
  fullName.vb: McpXLib.McpX.RandomWriteAsync(Of T1, T2)((prefix As McpXLib.Enums.Prefix, address As String, value As T1)(), (prefix As McpXLib.Enums.Prefix, address As String, value As T2)())
  name.vb: RandomWriteAsync(Of T1, T2)((prefix As Prefix, address As String, value As T1)(), (prefix As Prefix, address As String, value As T2)())
- uid: McpXLib.McpX.ReadString(McpXLib.Enums.Prefix,System.String,System.UInt16)
  commentId: M:McpXLib.McpX.ReadString(McpXLib.Enums.Prefix,System.String,System.UInt16)
  id: ReadString(McpXLib.Enums.Prefix,System.String,System.UInt16)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: ReadString(Prefix, string, ushort)
  nameWithType: McpX.ReadString(Prefix, string, ushort)
  fullName: McpXLib.McpX.ReadString(McpXLib.Enums.Prefix, string, ushort)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: ReadString
    path: ../McpXLib/McpX.cs
    startLine: 766
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 文字列読み込み
  remarks: 指定したデバイス範囲の値を文字列として、PLCから読み込みます。
  example: []
  syntax:
    content: public string ReadString(Prefix prefix, string address, ushort length)
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 読み込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 読み込み対象の先頭アドレスを指定します。
    - id: length
      type: System.UInt16
      description: 読み込みデバイス点数を指定します。
    return:
      type: System.String
      description: PLCから読み込んだ値（Shift_JIS）を文字列に変換して返します。
    content.vb: Public Function ReadString(prefix As Prefix, address As String, length As UShort) As String
  overload: McpXLib.McpX.ReadString*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.ReadString(Prefix, String, UShort)
  fullName.vb: McpXLib.McpX.ReadString(McpXLib.Enums.Prefix, String, UShort)
  name.vb: ReadString(Prefix, String, UShort)
- uid: McpXLib.McpX.ReadStringAsync(McpXLib.Enums.Prefix,System.String,System.UInt16)
  commentId: M:McpXLib.McpX.ReadStringAsync(McpXLib.Enums.Prefix,System.String,System.UInt16)
  id: ReadStringAsync(McpXLib.Enums.Prefix,System.String,System.UInt16)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: ReadStringAsync(Prefix, string, ushort)
  nameWithType: McpX.ReadStringAsync(Prefix, string, ushort)
  fullName: McpXLib.McpX.ReadStringAsync(McpXLib.Enums.Prefix, string, ushort)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: ReadStringAsync
    path: ../McpXLib/McpX.cs
    startLine: 786
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 文字列読み込み（非同期）
  remarks: 指定したデバイス範囲の値を文字列として、非同期でPLCから読み込みます。
  example: []
  syntax:
    content: public Task<string> ReadStringAsync(Prefix prefix, string address, ushort length)
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 読み込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 読み込み対象の先頭アドレスを指定します。
    - id: length
      type: System.UInt16
      description: 読み込みデバイス点数を指定します。
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: PLCから読み込んだ値（Shift_JIS）を文字列に変換して返します。
    content.vb: Public Function ReadStringAsync(prefix As Prefix, address As String, length As UShort) As Task(Of String)
  overload: McpXLib.McpX.ReadStringAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.ReadStringAsync(Prefix, String, UShort)
  fullName.vb: McpXLib.McpX.ReadStringAsync(McpXLib.Enums.Prefix, String, UShort)
  name.vb: ReadStringAsync(Prefix, String, UShort)
- uid: McpXLib.McpX.WriteString(McpXLib.Enums.Prefix,System.String,System.String)
  commentId: M:McpXLib.McpX.WriteString(McpXLib.Enums.Prefix,System.String,System.String)
  id: WriteString(McpXLib.Enums.Prefix,System.String,System.String)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: WriteString(Prefix, string, string)
  nameWithType: McpX.WriteString(Prefix, string, string)
  fullName: McpXLib.McpX.WriteString(McpXLib.Enums.Prefix, string, string)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: WriteString
    path: ../McpXLib/McpX.cs
    startLine: 805
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 文字列書き込み
  remarks: 指定したデバイスに対して、Shift_JISに変換した文字列データをPLCへ書き込みます。
  example: []
  syntax:
    content: public void WriteString(Prefix prefix, string address, string value)
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 書き込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 書き込み対象の先頭アドレスを指定します。
    - id: value
      type: System.String
      description: 書き込みする文字列を指定します。
    content.vb: Public Sub WriteString(prefix As Prefix, address As String, value As String)
  overload: McpXLib.McpX.WriteString*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.WriteString(Prefix, String, String)
  fullName.vb: McpXLib.McpX.WriteString(McpXLib.Enums.Prefix, String, String)
  name.vb: WriteString(Prefix, String, String)
- uid: McpXLib.McpX.WriteStringAsync(McpXLib.Enums.Prefix,System.String,System.String)
  commentId: M:McpXLib.McpX.WriteStringAsync(McpXLib.Enums.Prefix,System.String,System.String)
  id: WriteStringAsync(McpXLib.Enums.Prefix,System.String,System.String)
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: WriteStringAsync(Prefix, string, string)
  nameWithType: McpX.WriteStringAsync(Prefix, string, string)
  fullName: McpXLib.McpX.WriteStringAsync(McpXLib.Enums.Prefix, string, string)
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: WriteStringAsync
    path: ../McpXLib/McpX.cs
    startLine: 822
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: 文字列書き込み（非同期）
  remarks: 指定したデバイスに対して、Shift_JISに変換した文字列データを非同期でPLCへ書き込みます。
  example: []
  syntax:
    content: public Task WriteStringAsync(Prefix prefix, string address, string value)
    parameters:
    - id: prefix
      type: McpXLib.Enums.Prefix
      description: 書き込み対象の先頭デバイスコードを指定します。
    - id: address
      type: System.String
      description: 書き込み対象の先頭アドレスを指定します。
    - id: value
      type: System.String
      description: 書き込みする文字列を指定します。
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function WriteStringAsync(prefix As Prefix, address As String, value As String) As Task
  overload: McpXLib.McpX.WriteStringAsync*
  exceptions:
  - type: McpXLib.Exceptions.DeviceAddressException
    commentId: T:McpXLib.Exceptions.DeviceAddressException
    description: 指定したアドレスが不正の場合に例外をスローします。
  - type: McpXLib.Exceptions.RecivePacketException
    commentId: T:McpXLib.Exceptions.RecivePacketException
    description: 受信したパケットの内容が不正な値の場合に例外をスローします。
  - type: McpXLib.Exceptions.McProtocolException
    commentId: T:McpXLib.Exceptions.McProtocolException
    description: PLCからエラーコードを受信した場合に例外をスローします。
  nameWithType.vb: McpX.WriteStringAsync(Prefix, String, String)
  fullName.vb: McpXLib.McpX.WriteStringAsync(McpXLib.Enums.Prefix, String, String)
  name.vb: WriteStringAsync(Prefix, String, String)
- uid: McpXLib.McpX.Dispose
  commentId: M:McpXLib.McpX.Dispose
  id: Dispose
  parent: McpXLib.McpX
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: McpX.Dispose()
  fullName: McpXLib.McpX.Dispose()
  type: Method
  source:
    remote:
      path: McpXLib/McpX.cs
      branch: main
      repo: git@github.com:YudaiKitamura/McpX.git
    id: Dispose
    path: ../McpXLib/McpX.cs
    startLine: 833
  assemblies:
  - McpXLib
  namespace: McpXLib
  summary: インスタンス破棄
  remarks: 使用済みのリソースを解放し、必要に応じてPLCのリモートロックを実行します。
  example: []
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose()
  overridden: McpXLib.Abstructs.BasePlc.Dispose
  overload: McpXLib.McpX.Dispose*
references:
- uid: McpXLib
  commentId: N:McpXLib
  href: McpXLib.html
  name: McpXLib
  nameWithType: McpXLib
  fullName: McpXLib
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: McpXLib.Abstructs.BasePlc
  commentId: T:McpXLib.Abstructs.BasePlc
  parent: McpXLib.Abstructs
  href: McpXLib.Abstructs.BasePlc.html
  name: BasePlc
  nameWithType: BasePlc
  fullName: McpXLib.Abstructs.BasePlc
- uid: McpXLib.Mcp
  commentId: T:McpXLib.Mcp
  parent: McpXLib
  href: McpXLib.Mcp.html
  name: Mcp
  nameWithType: Mcp
  fullName: McpXLib.Mcp
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.idisposable
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: McpXLib.Interfaces.IPlc
  commentId: T:McpXLib.Interfaces.IPlc
  parent: McpXLib.Interfaces
  href: McpXLib.Interfaces.IPlc.html
  name: IPlc
  nameWithType: IPlc
  fullName: McpXLib.Interfaces.IPlc
- uid: McpXLib.Mcp.IsAscii
  commentId: P:McpXLib.Mcp.IsAscii
  parent: McpXLib.Mcp
  href: McpXLib.Mcp.html#McpXLib_Mcp_IsAscii
  name: IsAscii
  nameWithType: Mcp.IsAscii
  fullName: McpXLib.Mcp.IsAscii
- uid: McpXLib.Mcp.Route
  commentId: P:McpXLib.Mcp.Route
  parent: McpXLib.Mcp
  href: McpXLib.Mcp.html#McpXLib_Mcp_Route
  name: Route
  nameWithType: Mcp.Route
  fullName: McpXLib.Mcp.Route
- uid: McpXLib.Mcp.RequestFrame
  commentId: P:McpXLib.Mcp.RequestFrame
  parent: McpXLib.Mcp
  href: McpXLib.Mcp.html#McpXLib_Mcp_RequestFrame
  name: RequestFrame
  nameWithType: Mcp.RequestFrame
  fullName: McpXLib.Mcp.RequestFrame
- uid: McpXLib.Mcp.MonitorRegistAsync(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  commentId: M:McpXLib.Mcp.MonitorRegistAsync(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  parent: McpXLib.Mcp
  isExternal: true
  href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorRegistAsync_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  name: MonitorRegistAsync((Prefix, string)[], (Prefix, string)[])
  nameWithType: Mcp.MonitorRegistAsync((Prefix, string)[], (Prefix, string)[])
  fullName: McpXLib.Mcp.MonitorRegistAsync((McpXLib.Enums.Prefix, string)[], (McpXLib.Enums.Prefix, string)[])
  nameWithType.vb: Mcp.MonitorRegistAsync((Prefix, String)(), (Prefix, String)())
  fullName.vb: McpXLib.Mcp.MonitorRegistAsync((McpXLib.Enums.Prefix, String)(), (McpXLib.Enums.Prefix, String)())
  name.vb: MonitorRegistAsync((Prefix, String)(), (Prefix, String)())
  spec.csharp:
  - uid: McpXLib.Mcp.MonitorRegistAsync(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: MonitorRegistAsync
    href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorRegistAsync_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: McpXLib.Mcp.MonitorRegistAsync(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: MonitorRegistAsync
    href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorRegistAsync_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: )
- uid: McpXLib.Mcp.MonitorRegist(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  commentId: M:McpXLib.Mcp.MonitorRegist(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  parent: McpXLib.Mcp
  isExternal: true
  href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorRegist_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  name: MonitorRegist((Prefix, string)[], (Prefix, string)[])
  nameWithType: Mcp.MonitorRegist((Prefix, string)[], (Prefix, string)[])
  fullName: McpXLib.Mcp.MonitorRegist((McpXLib.Enums.Prefix, string)[], (McpXLib.Enums.Prefix, string)[])
  nameWithType.vb: Mcp.MonitorRegist((Prefix, String)(), (Prefix, String)())
  fullName.vb: McpXLib.Mcp.MonitorRegist((McpXLib.Enums.Prefix, String)(), (McpXLib.Enums.Prefix, String)())
  name.vb: MonitorRegist((Prefix, String)(), (Prefix, String)())
  spec.csharp:
  - uid: McpXLib.Mcp.MonitorRegist(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: MonitorRegist
    href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorRegist_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: McpXLib.Mcp.MonitorRegist(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: MonitorRegist
    href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorRegist_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: )
- uid: McpXLib.Mcp.MonitorAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  commentId: M:McpXLib.Mcp.MonitorAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  parent: McpXLib.Mcp
  isExternal: true
  href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorAsync__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  name: MonitorAsync<T1, T2>((Prefix, string)[], (Prefix, string)[])
  nameWithType: Mcp.MonitorAsync<T1, T2>((Prefix, string)[], (Prefix, string)[])
  fullName: McpXLib.Mcp.MonitorAsync<T1, T2>((McpXLib.Enums.Prefix, string)[], (McpXLib.Enums.Prefix, string)[])
  nameWithType.vb: Mcp.MonitorAsync(Of T1, T2)((Prefix, String)(), (Prefix, String)())
  fullName.vb: McpXLib.Mcp.MonitorAsync(Of T1, T2)((McpXLib.Enums.Prefix, String)(), (McpXLib.Enums.Prefix, String)())
  name.vb: MonitorAsync(Of T1, T2)((Prefix, String)(), (Prefix, String)())
  spec.csharp:
  - uid: McpXLib.Mcp.MonitorAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: MonitorAsync
    href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorAsync__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: McpXLib.Mcp.MonitorAsync``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: MonitorAsync
    href: McpXLib.Mcp.html#McpXLib_Mcp_MonitorAsync__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: )
- uid: McpXLib.Mcp.Monitor``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  commentId: M:McpXLib.Mcp.Monitor``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
  parent: McpXLib.Mcp
  isExternal: true
  href: McpXLib.Mcp.html#McpXLib_Mcp_Monitor__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  name: Monitor<T1, T2>((Prefix, string)[], (Prefix, string)[])
  nameWithType: Mcp.Monitor<T1, T2>((Prefix, string)[], (Prefix, string)[])
  fullName: McpXLib.Mcp.Monitor<T1, T2>((McpXLib.Enums.Prefix, string)[], (McpXLib.Enums.Prefix, string)[])
  nameWithType.vb: Mcp.Monitor(Of T1, T2)((Prefix, String)(), (Prefix, String)())
  fullName.vb: McpXLib.Mcp.Monitor(Of T1, T2)((McpXLib.Enums.Prefix, String)(), (McpXLib.Enums.Prefix, String)())
  name.vb: Monitor(Of T1, T2)((Prefix, String)(), (Prefix, String)())
  spec.csharp:
  - uid: McpXLib.Mcp.Monitor``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: Monitor
    href: McpXLib.Mcp.html#McpXLib_Mcp_Monitor__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: McpXLib.Mcp.Monitor``2(System.ValueTuple{McpXLib.Enums.Prefix,System.String}[],System.ValueTuple{McpXLib.Enums.Prefix,System.String}[])
    name: Monitor
    href: McpXLib.Mcp.html#McpXLib_Mcp_Monitor__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  - name: (
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
  - name: )
- uid: McpXLib.Abstructs.BasePlc.RequestAsync(System.Byte[])
  commentId: M:McpXLib.Abstructs.BasePlc.RequestAsync(System.Byte[])
  parent: McpXLib.Abstructs.BasePlc
  isExternal: true
  href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_RequestAsync_System_Byte___
  name: RequestAsync(byte[])
  nameWithType: BasePlc.RequestAsync(byte[])
  fullName: McpXLib.Abstructs.BasePlc.RequestAsync(byte[])
  nameWithType.vb: BasePlc.RequestAsync(Byte())
  fullName.vb: McpXLib.Abstructs.BasePlc.RequestAsync(Byte())
  name.vb: RequestAsync(Byte())
  spec.csharp:
  - uid: McpXLib.Abstructs.BasePlc.RequestAsync(System.Byte[])
    name: RequestAsync
    href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_RequestAsync_System_Byte___
  - name: (
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: McpXLib.Abstructs.BasePlc.RequestAsync(System.Byte[])
    name: RequestAsync
    href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_RequestAsync_System_Byte___
  - name: (
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: McpXLib.Abstructs.BasePlc.Request(System.Byte[])
  commentId: M:McpXLib.Abstructs.BasePlc.Request(System.Byte[])
  parent: McpXLib.Abstructs.BasePlc
  isExternal: true
  href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_Request_System_Byte___
  name: Request(byte[])
  nameWithType: BasePlc.Request(byte[])
  fullName: McpXLib.Abstructs.BasePlc.Request(byte[])
  nameWithType.vb: BasePlc.Request(Byte())
  fullName.vb: McpXLib.Abstructs.BasePlc.Request(Byte())
  name.vb: Request(Byte())
  spec.csharp:
  - uid: McpXLib.Abstructs.BasePlc.Request(System.Byte[])
    name: Request
    href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_Request_System_Byte___
  - name: (
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  - name: )
  spec.vb:
  - uid: McpXLib.Abstructs.BasePlc.Request(System.Byte[])
    name: Request
    href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_Request_System_Byte___
  - name: (
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: McpXLib.Abstructs
  commentId: N:McpXLib.Abstructs
  href: McpXLib.html
  name: McpXLib.Abstructs
  nameWithType: McpXLib.Abstructs
  fullName: McpXLib.Abstructs
  spec.csharp:
  - uid: McpXLib
    name: McpXLib
    href: McpXLib.html
  - name: .
  - uid: McpXLib.Abstructs
    name: Abstructs
    href: McpXLib.Abstructs.html
  spec.vb:
  - uid: McpXLib
    name: McpXLib
    href: McpXLib.html
  - name: .
  - uid: McpXLib.Abstructs
    name: Abstructs
    href: McpXLib.Abstructs.html
- uid: McpXLib.Interfaces
  commentId: N:McpXLib.Interfaces
  href: McpXLib.html
  name: McpXLib.Interfaces
  nameWithType: McpXLib.Interfaces
  fullName: McpXLib.Interfaces
  spec.csharp:
  - uid: McpXLib
    name: McpXLib
    href: McpXLib.html
  - name: .
  - uid: McpXLib.Interfaces
    name: Interfaces
    href: McpXLib.Interfaces.html
  spec.vb:
  - uid: McpXLib
    name: McpXLib
    href: McpXLib.html
  - name: .
  - uid: McpXLib.Interfaces
    name: Interfaces
    href: McpXLib.Interfaces.html
- uid: McpXLib.Exceptions.RecivePacketException
  commentId: T:McpXLib.Exceptions.RecivePacketException
  href: McpXLib.Exceptions.RecivePacketException.html
  name: RecivePacketException
  nameWithType: RecivePacketException
  fullName: McpXLib.Exceptions.RecivePacketException
- uid: McpXLib.Exceptions.McProtocolException
  commentId: T:McpXLib.Exceptions.McProtocolException
  href: McpXLib.Exceptions.McProtocolException.html
  name: McProtocolException
  nameWithType: McProtocolException
  fullName: McpXLib.Exceptions.McProtocolException
- uid: McpXLib.McpX.#ctor*
  commentId: Overload:McpXLib.McpX.#ctor
  href: McpXLib.McpX.html#McpXLib_McpX__ctor_System_String_System_Int32_System_String_System_Boolean_System_Boolean_McpXLib_Enums_RequestFrame_
  name: McpX
  nameWithType: McpX.McpX
  fullName: McpXLib.McpX.McpX
  nameWithType.vb: McpX.New
  fullName.vb: McpXLib.McpX.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: McpXLib.Enums.RequestFrame
  commentId: T:McpXLib.Enums.RequestFrame
  parent: McpXLib.Enums
  href: McpXLib.Enums.RequestFrame.html
  name: RequestFrame
  nameWithType: RequestFrame
  fullName: McpXLib.Enums.RequestFrame
- uid: McpXLib.Enums
  commentId: N:McpXLib.Enums
  href: McpXLib.html
  name: McpXLib.Enums
  nameWithType: McpXLib.Enums
  fullName: McpXLib.Enums
  spec.csharp:
  - uid: McpXLib
    name: McpXLib
    href: McpXLib.html
  - name: .
  - uid: McpXLib.Enums
    name: Enums
    href: McpXLib.Enums.html
  spec.vb:
  - uid: McpXLib
    name: McpXLib
    href: McpXLib.html
  - name: .
  - uid: McpXLib.Enums
    name: Enums
    href: McpXLib.Enums.html
- uid: McpXLib.Exceptions.DeviceAddressException
  commentId: T:McpXLib.Exceptions.DeviceAddressException
  href: McpXLib.Exceptions.DeviceAddressException.html
  name: DeviceAddressException
  nameWithType: DeviceAddressException
  fullName: McpXLib.Exceptions.DeviceAddressException
- uid: McpXLib.McpX.Read*
  commentId: Overload:McpXLib.McpX.Read
  href: McpXLib.McpX.html#McpXLib_McpX_Read__1_McpXLib_Enums_Prefix_System_String_
  name: Read
  nameWithType: McpX.Read
  fullName: McpXLib.McpX.Read
- uid: McpXLib.Enums.Prefix
  commentId: T:McpXLib.Enums.Prefix
  parent: McpXLib.Enums
  href: McpXLib.Enums.Prefix.html
  name: Prefix
  nameWithType: Prefix
  fullName: McpXLib.Enums.Prefix
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: McpXLib.McpX.ReadAsync*
  commentId: Overload:McpXLib.McpX.ReadAsync
  href: McpXLib.McpX.html#McpXLib_McpX_ReadAsync__1_McpXLib_Enums_Prefix_System_String_
  name: ReadAsync
  nameWithType: McpX.ReadAsync
  fullName: McpXLib.McpX.ReadAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: McpXLib.McpX.BatchRead*
  commentId: Overload:McpXLib.McpX.BatchRead
  href: McpXLib.McpX.html#McpXLib_McpX_BatchRead__1_McpXLib_Enums_Prefix_System_String_System_UInt16_
  name: BatchRead
  nameWithType: McpX.BatchRead
  fullName: McpXLib.McpX.BatchRead
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: McpXLib.McpX.BatchReadAsync*
  commentId: Overload:McpXLib.McpX.BatchReadAsync
  href: McpXLib.McpX.html#McpXLib_McpX_BatchReadAsync__1_McpXLib_Enums_Prefix_System_String_System_UInt16_
  name: BatchReadAsync
  nameWithType: McpX.BatchReadAsync
  fullName: McpXLib.McpX.BatchReadAsync
- uid: System.Threading.Tasks.Task{{T}[]}
  commentId: T:System.Threading.Tasks.Task{``0[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T[]>
  nameWithType: Task<T[]>
  fullName: System.Threading.Tasks.Task<T[]>
  nameWithType.vb: Task(Of T())
  fullName.vb: System.Threading.Tasks.Task(Of T())
  name.vb: Task(Of T())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: (
  - name: )
  - name: )
- uid: McpXLib.McpX.Write*
  commentId: Overload:McpXLib.McpX.Write
  href: McpXLib.McpX.html#McpXLib_McpX_Write__1_McpXLib_Enums_Prefix_System_String___0_
  name: Write
  nameWithType: McpX.Write
  fullName: McpXLib.McpX.Write
- uid: McpXLib.McpX.WriteAsync*
  commentId: Overload:McpXLib.McpX.WriteAsync
  href: McpXLib.McpX.html#McpXLib_McpX_WriteAsync__1_McpXLib_Enums_Prefix_System_String___0_
  name: WriteAsync
  nameWithType: McpX.WriteAsync
  fullName: McpXLib.McpX.WriteAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: McpXLib.McpX.BatchWrite*
  commentId: Overload:McpXLib.McpX.BatchWrite
  href: McpXLib.McpX.html#McpXLib_McpX_BatchWrite__1_McpXLib_Enums_Prefix_System_String___0___
  name: BatchWrite
  nameWithType: McpX.BatchWrite
  fullName: McpXLib.McpX.BatchWrite
- uid: McpXLib.McpX.BatchWriteAsync*
  commentId: Overload:McpXLib.McpX.BatchWriteAsync
  href: McpXLib.McpX.html#McpXLib_McpX_BatchWriteAsync__1_McpXLib_Enums_Prefix_System_String___0___
  name: BatchWriteAsync
  nameWithType: McpX.BatchWriteAsync
  fullName: McpXLib.McpX.BatchWriteAsync
- uid: McpXLib.McpX.RandomRead*
  commentId: Overload:McpXLib.McpX.RandomRead
  href: McpXLib.McpX.html#McpXLib_McpX_RandomRead__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  name: RandomRead
  nameWithType: McpX.RandomRead
  fullName: McpXLib.McpX.RandomRead
- uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String}[]
  isExternal: true
  href: McpXLib.Enums.Prefix.html
  name: (Prefix, string)[]
  nameWithType: (Prefix, string)[]
  fullName: (McpXLib.Enums.Prefix, string)[]
  nameWithType.vb: (Prefix, String)()
  fullName.vb: (McpXLib.Enums.Prefix, String)()
  name.vb: (Prefix, String)()
  spec.csharp:
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
  - name: (
  - name: )
- uid: System.ValueTuple{{T1}[],{T2}[]}
  commentId: T:System.ValueTuple{``0[],``1[]}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.wordvalues
  name: (T1[] wordValues, T2[] doubleValues)
  nameWithType: (T1[] wordValues, T2[] doubleValues)
  fullName: (T1[] wordValues, T2[] doubleValues)
  nameWithType.vb: (wordValues As T1(), doubleValues As T2())
  fullName.vb: (wordValues As T1(), doubleValues As T2())
  name.vb: (wordValues As T1(), doubleValues As T2())
  spec.csharp:
  - name: (
  - name: T1
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{``0[],``1[]}.wordValues
    name: wordValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.wordvalues
  - name: ','
  - name: " "
  - name: T2
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{``0[],``1[]}.doubleValues
    name: doubleValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.doublevalues
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{``0[],``1[]}.wordValues
    name: wordValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.wordvalues
  - name: " "
  - name: As
  - name: " "
  - name: T1
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{``0[],``1[]}.doubleValues
    name: doubleValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.doublevalues
  - name: " "
  - name: As
  - name: " "
  - name: T2
  - name: (
  - name: )
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: McpXLib.McpX.RandomReadAsync*
  commentId: Overload:McpXLib.McpX.RandomReadAsync
  href: McpXLib.McpX.html#McpXLib_McpX_RandomReadAsync__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String____System_ValueTuple_McpXLib_Enums_Prefix_System_String____
  name: RandomReadAsync
  nameWithType: McpX.RandomReadAsync
  fullName: McpXLib.McpX.RandomReadAsync
- uid: System.Threading.Tasks.Task{System.ValueTuple{{T1}[],{T2}[]}}
  commentId: T:System.Threading.Tasks.Task{System.ValueTuple{``0[],``1[]}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<(T1[] wordValues, T2[] doubleValues)>
  nameWithType: Task<(T1[] wordValues, T2[] doubleValues)>
  fullName: System.Threading.Tasks.Task<(T1[] wordValues, T2[] doubleValues)>
  nameWithType.vb: Task(Of (wordValues As T1(), doubleValues As T2()))
  fullName.vb: System.Threading.Tasks.Task(Of (wordValues As T1(), doubleValues As T2()))
  name.vb: Task(Of (wordValues As T1(), doubleValues As T2()))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: (
  - name: T1
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{``0[],``1[]}.wordValues
    name: wordValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.wordvalues
  - name: ','
  - name: " "
  - name: T2
  - name: '['
  - name: ']'
  - name: " "
  - uid: System.ValueTuple{``0[],``1[]}.doubleValues
    name: doubleValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.doublevalues
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.ValueTuple{``0[],``1[]}.wordValues
    name: wordValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.wordvalues
  - name: " "
  - name: As
  - name: " "
  - name: T1
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.ValueTuple{``0[],``1[]}.doubleValues
    name: doubleValues
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple---0[],--1[]-.doublevalues
  - name: " "
  - name: As
  - name: " "
  - name: T2
  - name: (
  - name: )
  - name: )
  - name: )
- uid: McpXLib.McpX.RandomWrite*
  commentId: Overload:McpXLib.McpX.RandomWrite
  href: McpXLib.McpX.html#McpXLib_McpX_RandomWrite__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String___0____System_ValueTuple_McpXLib_Enums_Prefix_System_String___1____
  name: RandomWrite
  nameWithType: McpX.RandomWrite
  fullName: McpXLib.McpX.RandomWrite
- uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,{T1}}[]
  isExternal: true
  href: McpXLib.Enums.Prefix.html
  name: (Prefix prefix, string address, T1 value)[]
  nameWithType: (Prefix prefix, string address, T1 value)[]
  fullName: (McpXLib.Enums.Prefix prefix, string address, T1 value)[]
  nameWithType.vb: (prefix As Prefix, address As String, value As T1)()
  fullName.vb: (prefix As McpXLib.Enums.Prefix, address As String, value As T1)()
  name.vb: (prefix As Prefix, address As String, value As T1)()
  spec.csharp:
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}.prefix
    name: prefix
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--0-.prefix
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}.address
    name: address
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--0-.address
  - name: ','
  - name: " "
  - name: T1
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}.value
    name: value
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--0-.value
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}.prefix
    name: prefix
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--0-.prefix
  - name: " "
  - name: As
  - name: " "
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}.address
    name: address
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--0-.address
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``0}.value
    name: value
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--0-.value
  - name: " "
  - name: As
  - name: " "
  - name: T1
  - name: )
  - name: (
  - name: )
- uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,{T2}}[]
  isExternal: true
  href: McpXLib.Enums.Prefix.html
  name: (Prefix prefix, string address, T2 value)[]
  nameWithType: (Prefix prefix, string address, T2 value)[]
  fullName: (McpXLib.Enums.Prefix prefix, string address, T2 value)[]
  nameWithType.vb: (prefix As Prefix, address As String, value As T2)()
  fullName.vb: (prefix As McpXLib.Enums.Prefix, address As String, value As T2)()
  name.vb: (prefix As Prefix, address As String, value As T2)()
  spec.csharp:
  - name: (
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}.prefix
    name: prefix
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--1-.prefix
  - name: ','
  - name: " "
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}.address
    name: address
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--1-.address
  - name: ','
  - name: " "
  - name: T2
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}.value
    name: value
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--1-.value
  - name: )
  - name: '['
  - name: ']'
  spec.vb:
  - name: (
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}.prefix
    name: prefix
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--1-.prefix
  - name: " "
  - name: As
  - name: " "
  - uid: McpXLib.Enums.Prefix
    name: Prefix
    href: McpXLib.Enums.Prefix.html
  - name: ','
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}.address
    name: address
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--1-.address
  - name: " "
  - name: As
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: ','
  - name: " "
  - uid: System.ValueTuple{McpXLib.Enums.Prefix,System.String,``1}.value
    name: value
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-mcpxlib.enums.prefix,system.string,--1-.value
  - name: " "
  - name: As
  - name: " "
  - name: T2
  - name: )
  - name: (
  - name: )
- uid: McpXLib.McpX.RandomWriteAsync*
  commentId: Overload:McpXLib.McpX.RandomWriteAsync
  href: McpXLib.McpX.html#McpXLib_McpX_RandomWriteAsync__2_System_ValueTuple_McpXLib_Enums_Prefix_System_String___0____System_ValueTuple_McpXLib_Enums_Prefix_System_String___1____
  name: RandomWriteAsync
  nameWithType: McpX.RandomWriteAsync
  fullName: McpXLib.McpX.RandomWriteAsync
- uid: McpXLib.McpX.ReadString*
  commentId: Overload:McpXLib.McpX.ReadString
  href: McpXLib.McpX.html#McpXLib_McpX_ReadString_McpXLib_Enums_Prefix_System_String_System_UInt16_
  name: ReadString
  nameWithType: McpX.ReadString
  fullName: McpXLib.McpX.ReadString
- uid: McpXLib.McpX.ReadStringAsync*
  commentId: Overload:McpXLib.McpX.ReadStringAsync
  href: McpXLib.McpX.html#McpXLib_McpX_ReadStringAsync_McpXLib_Enums_Prefix_System_String_System_UInt16_
  name: ReadStringAsync
  nameWithType: McpX.ReadStringAsync
  fullName: McpXLib.McpX.ReadStringAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<string>
  nameWithType: Task<string>
  fullName: System.Threading.Tasks.Task<string>
  nameWithType.vb: Task(Of String)
  fullName.vb: System.Threading.Tasks.Task(Of String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: McpXLib.McpX.WriteString*
  commentId: Overload:McpXLib.McpX.WriteString
  href: McpXLib.McpX.html#McpXLib_McpX_WriteString_McpXLib_Enums_Prefix_System_String_System_String_
  name: WriteString
  nameWithType: McpX.WriteString
  fullName: McpXLib.McpX.WriteString
- uid: McpXLib.McpX.WriteStringAsync*
  commentId: Overload:McpXLib.McpX.WriteStringAsync
  href: McpXLib.McpX.html#McpXLib_McpX_WriteStringAsync_McpXLib_Enums_Prefix_System_String_System_String_
  name: WriteStringAsync
  nameWithType: McpX.WriteStringAsync
  fullName: McpXLib.McpX.WriteStringAsync
- uid: McpXLib.Abstructs.BasePlc.Dispose
  commentId: M:McpXLib.Abstructs.BasePlc.Dispose
  parent: McpXLib.Abstructs.BasePlc
  href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_Dispose
  name: Dispose()
  nameWithType: BasePlc.Dispose()
  fullName: McpXLib.Abstructs.BasePlc.Dispose()
  spec.csharp:
  - uid: McpXLib.Abstructs.BasePlc.Dispose
    name: Dispose
    href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_Dispose
  - name: (
  - name: )
  spec.vb:
  - uid: McpXLib.Abstructs.BasePlc.Dispose
    name: Dispose
    href: McpXLib.Abstructs.BasePlc.html#McpXLib_Abstructs_BasePlc_Dispose
  - name: (
  - name: )
- uid: McpXLib.McpX.Dispose*
  commentId: Overload:McpXLib.McpX.Dispose
  href: McpXLib.McpX.html#McpXLib_McpX_Dispose
  name: Dispose
  nameWithType: McpX.Dispose
  fullName: McpXLib.McpX.Dispose
